{"version":3,"sources":["App.js","serviceWorker.js","redux/reducers.js","redux/index.js","index.js"],"names":["MainPage","lazy","FormPage","MyRoute","exact","path","component","App","fallback","React","Component","Boolean","window","location","hostname","match","defaultForm","themes","name","value","theme","message","email","themesMenuOpened","submitted","mainReducer","combineReducers","form","state","action","type","selectedTheme","map","i","Object","assign","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAIMA,G,MAASC,gBAAK,kBAAI,uDAClBC,EAASD,gBAAK,kBAAI,gCAexB,SAASE,IACP,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,UAAWN,IACnC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAM,QAASC,UAAWJ,IACvC,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAM,aAAcC,UAAWJ,KAKnCK,M,iLArBX,OACE,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,cAClB,kBAACL,EAAD,Y,GALQM,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WChBAC,EAAY,CACjBC,OAAO,CAAC,CACPC,KAAK,6BACLC,MAAM,GACL,CACDD,KAAK,6BACLC,MAAM,GACL,CACDD,KAAK,6BACLC,MAAM,GACL,CACDD,KAAK,6BACLC,MAAM,IAEPC,MAAM,GACNC,QAAQ,GACRH,KAAK,GACLI,MAAM,GACNC,kBAAiB,EACjBC,WAAU,GAgDX,IAIeC,EAJGC,YAAgB,CACjCC,KA9CD,WAAwC,IAA1BC,EAAyB,uDAAnBZ,EAAYa,EAAO,uCACtC,OAAOA,EAAOC,MACb,IAAK,eACJ,IAAIC,EAAc,GAMlB,OALAH,EAAMX,OAAOe,KAAI,SAACZ,EAAMa,GACpBb,EAAMD,OAAOU,EAAOV,QACtBY,EAAcX,MAGTc,OAAOC,OAAO,GAAGP,EAAM,CAC7BR,MAAMW,EACNR,kBAAiB,IAEnB,IAAK,qBACJ,OAAOW,OAAOC,OAAO,GAAGP,EAAM,CAC7BL,kBAAkBK,EAAML,mBAE1B,IAAK,aACJ,OAAOW,OAAOC,OAAO,GAAGP,EAAM,CAC7BV,KAAKW,EAAOX,OAEd,IAAK,cACJ,OAAOgB,OAAOC,OAAO,GAAGP,EAAM,CAC7BN,MAAMO,EAAOP,QAEf,IAAK,gBACJ,OAAOY,OAAOC,OAAO,GAAGP,EAAM,CAC7BP,QAAQQ,EAAOR,UAEjB,IAAK,aACJ,OAAOa,OAAOC,OAAO,GAAGP,EAAM,CAC7BV,KAAK,GACLI,MAAM,GACNF,MAAM,GACNC,QAAQ,KAEV,IAAK,cACJ,OAAOa,OAAOC,OAAO,GAAGP,EAAM,CAC7BJ,WAAU,IAEZ,QACC,OAAOI,MC3DKQ,EAFHC,YAAYZ,GCIxBa,IAASC,OACR,kBAAC,IAAD,CAAUH,MAAOA,GAChB,kBAAC,EAAD,OAEDI,SAASC,eAAe,SHqHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cf10da7b.chunk.js","sourcesContent":["import React,{lazy,Suspense} from 'react';\nimport {Switch, BrowserRouter as Router, Route} from 'react-router-dom';\nimport './App.css';\n\nconst MainPage=lazy(()=>import('./containers/Home'));\nconst FormPage=lazy(()=>import('./containers/Form'));\n\nclass App extends React.Component{\n  render(){\n    return (\n      <Router>\n        <Suspense fallback={'Loading...'}>\n          <MyRoute />\n        </Suspense>\n      </Router>\n    );\n  }\n  \n}\n\nfunction MyRoute(){\n  return(\n    <Switch>\n      <Route exact path={'/'} component={MainPage} />\n      <Route exact path={'/form'} component={FormPage} />\n      <Route exact path={'/form/edit'} component={FormPage} />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers} from 'redux';\r\n\r\nconst defaultForm={\r\n\tthemes:[{\r\n\t\tname:'Тема 1',\r\n\t\tvalue:1\r\n\t},{\r\n\t\tname:'Тема 2',\r\n\t\tvalue:2\r\n\t},{\r\n\t\tname:'Тема 3',\r\n\t\tvalue:3\r\n\t},{\r\n\t\tname:'Тема 4',\r\n\t\tvalue:4\r\n\t}],\r\n\ttheme:'',\r\n\tmessage:'',\r\n\tname:'',\r\n\temail:'',\r\n\tthemesMenuOpened:false,\r\n\tsubmitted:false\r\n}\r\n\r\nfunction form(state=defaultForm,action){\r\n\tswitch(action.type){\r\n\t\tcase 'SELECT_THEME':\r\n\t\t\tvar selectedTheme={};\r\n\t\t\tstate.themes.map((theme,i)=>{\r\n\t\t\t\tif(theme.value==action.value){\r\n\t\t\t\t\tselectedTheme=theme;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn Object.assign({},state,{\r\n\t\t\t\ttheme:selectedTheme,\r\n\t\t\t\tthemesMenuOpened:false\r\n\t\t\t});\r\n\t\tcase 'TOGGLE_THEMES_MENU':\r\n\t\t\treturn Object.assign({},state,{\r\n\t\t\t\tthemesMenuOpened:!state.themesMenuOpened\r\n\t\t\t});\r\n\t\tcase 'INPUT_NAME':\r\n\t\t\treturn Object.assign({},state,{\r\n\t\t\t\tname:action.name\r\n\t\t\t});\r\n\t\tcase 'INPUT_EMAIL':\r\n\t\t\treturn Object.assign({},state,{\r\n\t\t\t\temail:action.email\r\n\t\t\t});\r\n\t\tcase 'INPUT_MESSAGE':\r\n\t\t\treturn Object.assign({},state,{\r\n\t\t\t\tmessage:action.message\r\n\t\t\t});\r\n\t\tcase 'RESET_FORM':\r\n\t\t\treturn Object.assign({},state,{\r\n\t\t\t\tname:'',\r\n\t\t\t\temail:'',\r\n\t\t\t\ttheme:'',\r\n\t\t\t\tmessage:''\r\n\t\t\t});\r\n\t\tcase 'SUBMIT_FORM':\r\n\t\t\treturn Object.assign({},state,{\r\n\t\t\t\tsubmitted:true\r\n\t\t\t});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst mainReducer=combineReducers({\r\n\tform\r\n});\r\n\r\nexport default mainReducer;","import {createStore} from 'redux';\r\n\r\nimport mainReducer from './reducers';\r\n\r\nconst store=createStore(mainReducer);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/index';\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}